generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider          = "postgresql"
    url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
    shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
    id                 String  @id @default(cuid())
    userId             String  @map("user_id")
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String?
    access_token       String?
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    email         String       @unique
    emailVerified String?      @map("email_verified")
    name          String?
    image         String?
    htmlUrl       String?      @map("html_url")
    bio           String?
    location      String?
    createdAt     String?      @map("created_at")
    updatedAt     String?      @map("updated_at")
    accounts      Account[]
    sessions      Session[]
    repositories  Repository[]
    followers     Follower[]
    following     Following[]
    friends       Friend[]
}

model Repository {
    id              String  @id @default(cuid())
    name            String
    owner           String
    htmlUrl         String  @map("html_url")
    description     String?
    createdAt       String  @map("created_at")
    updatedAt       String  @map("updated_at")
    gitUrl          String  @map("git_url")
    sshUrl          String  @map("ssh_url")
    cloneUrl        String  @map("clone_url")
    homepage        String?
    stargazersCount Int     @map("stargazers_count")
    watchersCount   Int     @map("watchers_count")
    language        String?
    visibility      String

    userId String @map("user_id")
    user   User   @relation(fields: [userId], references: [id])

    @@unique([name, userId])
}

model Follower {
    id      String  @id @default(cuid())
    name    String?
    image   String
    htmlUrl String  @map("html_url")
    user    User    @relation(fields: [userId], references: [id])
    userId  String  @map("user_id")
}

model Following {
    id      String  @id @default(cuid())
    name    String?
    image   String
    htmlUrl String  @map("html_url")

    user   User   @relation(fields: [userId], references: [id])
    userId String @map("user_id")
}

model Friend {
    id      String  @id @default(cuid())
    name    String?
    image   String
    htmlUrl String  @map("html_url")
    user    User    @relation(fields: [userId], references: [id])
    userId  String  @map("user_id")
}
