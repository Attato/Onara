import React, { useState, useMemo, useCallback } from 'react';

import fs from 'fs/promises';
import path from 'path';
import matter from 'gray-matter';

import { GetStaticPaths, GetStaticProps } from 'next';
import Head from 'next/head';
import Link from 'next/link';
import { usePathname } from 'next/navigation';

import { MDXRemote } from 'next-mdx-remote';
import { serialize } from 'next-mdx-remote/serialize';
import { MDXProvider } from '@mdx-js/react';

import { ChevronRightIcon } from '@heroicons/react/24/solid';
import MdxSidebar from '@/components/MdxSidebar';
import BurgerMenu from '@/components/BurgerMenu';
import NavLinks from '@/components/NavLinks';

// Компоненты для использования в mdx файлах
import Alert from '@/components/Alert';
import CodeBlock from '@/components/CodeBlock';
import Dropdown from '@/components/Dropdown';

import Loading from '@/components/Loading';
import Popup from '@/components/Popup';

import { GiftIcon } from '@heroicons/react/24/outline';

// Шаблоны для использования в mdx файлах
import AlertPopup from '@/components/_Templates/AlertPopup';
import AuthorizationPopup from '@/components/_Templates/AuthorizationPopup';

import styles from './index.module.scss';
import { NextPage } from 'next/types';

interface PostData {
	[key: string]: any;
}

export interface Post {
	slug: string;
	frontMatter: PostData;
}

interface SlugPageProps {
	mdxSource: any;
	frontMatter: PostData;
	allPosts: Post[];
}

const getPosts = async (): Promise<Post[]> => {
	// Get the path to the directory containing the MDX files
	const mdxFilesDirectory = path.join(process.cwd(), 'posts/docs');
	const mdxFiles = await fs.readdir(mdxFilesDirectory);

	const posts = await Promise.all(
		mdxFiles.map(async (file) => {
			const slug = file.replace(/\.mdx$/, '');
			const { data: frontMatter } = await getMdxFileContent(slug);
			return { slug, frontMatter };
		})
	);

	return posts;
};

const getMdxFileContent = async (slug: string) => {
	const mdxFilePath = path.join(process.cwd(), `posts/docs/${slug}.mdx`);
	const fileContents = await fs.readFile(mdxFilePath, 'utf-8');
	const { content, data } = matter(fileContents);

	return { content, data: { ...data } };
};

// Благодаря этому компоненты работают в mdx файлах
const components = {
	Alert,
	CodeBlock,
	Dropdown,
	Loading,
	Popup,
	AlertPopup,
	AuthorizationPopup,
	// иконки
	GiftIcon,
};

const SlugPage: NextPage<SlugPageProps> = ({
	mdxSource,
	frontMatter,
	allPosts,
}) => {
	const [isBurgerMenuOpen, setIsBurgerMenuOpen] = useState<boolean>(false);

	const closeBurgerMenu = useCallback(() => {
		setTimeout(() => {
			setIsBurgerMenuOpen((prevState) => !prevState);
		}, 100);
	}, []);

	const [day, month, year] = useMemo(() => {
		return frontMatter.lastUpdated !== undefined
			? frontMatter.lastUpdated.split('-')
			: [];
	}, [frontMatter.lastUpdated]);

	const date = useMemo(
		() => new Date(`${month}-${day}-${year}`),
		[day, month, year]
	);

	const options = useMemo(
		() => ({
			day: 'numeric' as const,
			month: 'long' as const,
			year: 'numeric' as const,
		}),
		[]
	);

	const formattedDate = useMemo(
		() => date.toLocaleDateString('en-US', options),
		[date, options]
	);

	const pathname = usePathname();

	// Sidebar logic
	const sortedPosts = useMemo(() => {
		return [...allPosts].sort((a, b) => a.frontMatter.id - b.frontMatter.id);
	}, [allPosts]);

	const categories = useMemo(() => {
		return sortedPosts.reduce((categories, post) => {
			const category = post.frontMatter.category;
			const isActive = pathname === `/docs/${post.slug}`;

			categories[category] = categories[category] || [];
			categories[category].push(
				<Link
					key={post.slug}
					href={`/docs/${post.slug}`}
					className={isActive ? styles.activeLink : ''}
				>
					{post.frontMatter.title}
				</Link>
			);

			return categories;
		}, {} as { [category: string]: JSX.Element[] });
	}, [pathname, sortedPosts]);

	return (
		<>
			<Head>
				<title>{frontMatter.title}</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/icon.svg" />
				<link rel="manifest" href="/manifest.json" />
			</Head>

			<div className={styles.docs}>
				<div className={styles.breadcrumb}>
					<BurgerMenu
						isBurgerMenuOpen={isBurgerMenuOpen}
						closeBurgerMenu={closeBurgerMenu}
						title={
							<React.Fragment>
								{allPosts
									.filter((post) => `/docs/${post.slug}` === pathname)
									.map((post) => {
										return (
											<div
												key={post.slug}
												className={styles.breadcrumb_content}
											>
												{post.frontMatter.category}
												<ChevronRightIcon width={14} height={14} />
												<span>{post.frontMatter.title}</span>
											</div>
										);
									})}
							</React.Fragment>
						}
					>
						{Object.entries(categories).map(([category, links]) => (
							<div key={category} className={styles.burgerMenu_category}>
								<h4 className={styles.burgerMenu_category_title}>{category}</h4>

								<div className={styles.burgerMenu_links}>{links}</div>
							</div>
						))}
					</BurgerMenu>
				</div>
				<div className="main">
					<div className={styles.slug}>
						<MdxSidebar posts={allPosts} />

						<div className={styles.page_content}>
							<div className={styles.time_info}>
								<span>{formattedDate}</span>
								<span> 1 min read</span>
							</div>

							<MDXProvider components={components}>
								<MDXRemote {...mdxSource} />
							</MDXProvider>

							<NavLinks posts={allPosts} />
						</div>
					</div>
				</div>
			</div>
		</>
	);
};

export const getStaticPaths: GetStaticPaths = async () => {
	const mdxFilesDirectory = path.join(process.cwd(), 'posts/docs');
	const mdxFiles = await fs.readdir(mdxFilesDirectory);

	const paths = mdxFiles.map((file) => ({
		params: { slug: file.replace(/\.mdx$/, '') },
	}));

	return { paths, fallback: false };
};

export const getStaticProps: GetStaticProps = async ({ params }) => {
	const { slug }: any = params;
	const { content, data: frontMatter } = await getMdxFileContent(
		slug as string
	);
	const mdxSource = await serialize(content);
	const allPosts = await getPosts();

	return { props: { mdxSource, frontMatter, allPosts } };
};

export default SlugPage;
