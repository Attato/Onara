import { GetStaticProps } from 'next';

import type { NextPage } from 'next';

import Head from 'next/head';
import Link from 'next/link';
import Image from 'next/image';

import fs from 'fs/promises';
import path from 'path';

import matter from 'gray-matter';

import { MDXRemote } from 'next-mdx-remote';
import { serialize } from 'next-mdx-remote/serialize';

import { ArrowTopRightOnSquareIcon } from '@heroicons/react/24/solid';

import styles from './index.module.scss';

const components = {
	Image,
};

interface PostData {
	[key: string]: any;
}

interface Post {
	slug: string;
	frontMatter: PostData;
}

interface ChangelogPageProps {
	posts: Post[];
}

const Changelog: NextPage<ChangelogPageProps> = ({ posts }) => {
	return (
		<>
			<Head>
				<title>Changelog</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/icon.svg" />
				<link rel="manifest" href="/manifest.json" />
			</Head>

			<div className={styles.page_content}>
				<div className={styles.masthead}>
					<Image
						src="/illustrations/background_image_2.svg"
						width={1920}
						height={400}
						alt="background"
						priority={true}
					/>
					<div className={styles.masthead_content}>
						<h1 className={styles.title}>Changelog</h1>
						<div className={styles.subtitle}>
							Check out our Changelog to keep up to date with all the new
							features and improvements we&apos;re bringing to you. Stay up to
							date and follow the development of our product.
							<div className={styles.links}>
								<Link href="https://discord.gg/4YV3qRCYqp" target="_blank">
									Subscribe to updates
									<ArrowTopRightOnSquareIcon width={14} height={14} />
								</Link>
								<Link href="https://t.me/+wK4gxiduYBwxYzFi" target="_blank">
									Follow us on Telegram
									<ArrowTopRightOnSquareIcon width={14} height={14} />
								</Link>
							</div>
						</div>
					</div>
				</div>

				{posts.map((post) => {
					return (
						<div key={post.slug} className={styles.changelog}>
							<div className={styles.changelog_content}>
								<div className={styles.date}>
									<p>{post.frontMatter.releaseDate}</p>

									<p>
										{post.frontMatter.isToday ? (
											<span>(Today&apos;s log)</span>
										) : (
											<span>{`(${post.frontMatter.diffDays} days ago)`}</span>
										)}
									</p>
								</div>

								<div className={styles.details}>
									<MDXRemote
										{...post.frontMatter.content}
										components={components}
									/>
								</div>
							</div>
						</div>
					);
				})}
			</div>
		</>
	);
};

const getFormattedDate = (fileName: string) => {
	// Extract the date parts from the file name
	const [day, month, year] = fileName.split('.')[0].split('-');

	// Create a Date object from the extracted parts
	const date = new Date(`${month}-${day}-${year}`);

	const options: Intl.DateTimeFormatOptions = {
		day: 'numeric',
		month: 'long',
		year: 'numeric',
	};

	const formattedDate = date.toLocaleDateString('en-US', options);
	const today = new Date();
	const isToday = today.toLocaleDateString('en-US', options) === formattedDate;

	const diffTime = Math.abs(today.getTime() - date.getTime());
	const diffDays =
		Math.ceil(
			(diffTime - today.getTimezoneOffset() * 60 * 1000) / (1000 * 60 * 60 * 24)
		) - 1;

	if (diffDays === 0) {
		if (isToday) {
			return { formattedDate, isToday: true, diffDays };
		}
	}

	return { formattedDate, isToday: false, diffDays };
};

const getPosts = async (): Promise<Post[]> => {
	// Get the path to the directory containing the MDX files
	const mdxFilesDirectory = path.join(process.cwd(), 'posts/changelog');
	const mdxFiles = await fs.readdir(mdxFilesDirectory);

	const posts = await Promise.all(
		mdxFiles.map(async (file) => {
			const slug = file.replace(/\.mdx?$/, '');
			const fullPath = path.join(mdxFilesDirectory, file);
			const fileContents = await fs.readFile(fullPath, 'utf8');
			const { data, content } = matter(fileContents);

			const mdxSource = await serialize(content, {
				scope: data,
			});

			const { formattedDate, isToday, diffDays } = getFormattedDate(slug);

			return {
				slug,
				frontMatter: {
					...data,
					content: mdxSource,
					releaseDate: formattedDate,
					isToday,
					diffDays,
				},
			};
		})
	);

	const sortedPosts = posts.sort((a, b) => {
		const dateA = new Date(a.frontMatter.releaseDate);
		const dateB = new Date(b.frontMatter.releaseDate);

		if (dateA > dateB) return -1;
		if (dateA < dateB) return 1;
		return 0;
	});

	return sortedPosts;
};

export const getStaticProps: GetStaticProps<ChangelogPageProps> = async () => {
	const posts = await getPosts();

	return {
		props: {
			posts,
		},
	};
};

export default Changelog;
